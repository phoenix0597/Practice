# Задача 2. Накопление значений
# При работе со значениями по умолчанию и изменяемыми типами данных нужно знать и остерегаться
# ещё одной интересной штуки.
#
# Напишите функцию с двумя аргументами:
# первый — число num, позиционный аргумент;
# второй — список lst, по умолчанию он пустой.
# В теле функции в список добавляется число num и сам список выводится на экран.
#
# В основной программе вызовите функции три раза только с одним аргументом (числом), например так:
# add_num(5)
# add_num(10)
# add_num(15)

# Напишите функцию с двумя аргументами:
# первый — число num, позиционный аргумент;
# второй — список lst, по умолчанию он пустой.
# В теле функции в список добавляется число num и сам список выводится на экран.
# В основной программе вызовите функции три раза только с одним аргументом (числом), например так:
# add_num(5)
# add_num(10)
# add_num(15)
#
# И посмотрите, что произойдёт.
# После этого сделайте значение lst по умолчанию None и поправьте функцию, чтобы она работала правильно.


# def add_num(num, lst=[]):
def add_num(num, lst=[]):
    lst.append(num)
    print(lst)

    
print('\nКогда именованный параметр lst по умолчанию =[] (add_num(5, []))')
add_num(5)
add_num(10)
add_num(15)
print('\nКогда именованный параметр lst по умолчанию =None (add_num_1(5, []))')


def add_num_1(num, lst=None):
    lst.append(num)
    print(lst)


add_num_1(5, [])
add_num_1(10, [])
add_num_1(15, [])
